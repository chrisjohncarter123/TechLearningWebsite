{"ast":null,"code":"const accountTemplate = state => ({\n  name: state.name,\n  cash: state.cash\n});\n\nconst transactionTemplate = state => ({\n  account_from: state.account_from,\n  account_to: state.account_to,\n  cash: state.cash\n}); //an action is a pojo with info that describes state change\n// example: {type: \"LOADING_ACCOUNTS\", payload: {}} (payload is optional)\n//thunk puts fetch() logic into action creators\n//Thunk middleware allows action creators to return functions that don't need to be pure\n//this allows async api calls\n\n/*\n\n//thunk enables proper async requests to be used with redux\n\n\n//without thunk:\nexport function fetchAstronauts() {\n  const astronauts = fetch('http://api.open-notify.org/astros.json')\n                      .then(response => response.json())\n  return {\n    type: 'ADD_ASTRONAUTS',\n    astronauts\n  };\n}\n\n\n\n*/\n\n\nexport const fetchAccounts = () => {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_ACCOUNTS'\n    });\n    fetch('http://localhost:4000/accounts').then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      dispatch({\n        type: 'ADD_ACCOUNTS',\n        accounts: responseJSON\n      });\n    });\n  };\n};\nexport const fetchTransactions = () => {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_TRANSACTIONS'\n    });\n    fetch('http://localhost:4000/transactions').then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      dispatch({\n        type: 'ADD_TRANSACTIONS',\n        transactions: responseJSON\n      });\n    });\n  };\n};\nexport const fetchCats = () => {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_CATS'\n    });\n    fetch('https://learn-co-curriculum.github.io/cat-api/cats.json').then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      dispatch({\n        type: 'ADD_CATS',\n        cats: responseJSON.images\n      });\n    });\n  };\n};\nexport const createAccount = state => {\n  let header = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(accountTemplate(state))\n  };\n  return dispatch => {\n    dispatch({\n      type: 'CREATE_ACCOUNT'\n    });\n    fetch('http://localhost:4000/accounts', header).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      console.log(responseJSON); // dispatch({ type: 'ADD_ACCOUNTS', accounts: responseJSON })\n    });\n  };\n};\nexport const createTransaction = state => {\n  let header = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(transactionTemplate(state))\n  };\n  return dispatch => {\n    dispatch({\n      type: 'CREATE_TRANSACTION'\n    });\n    fetch('http://localhost:4000/transactions/', header).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      console.log(responseJSON); // dispatch({ type: 'ADD_ACCOUNTS', accounts: responseJSON })\n    });\n  };\n};","map":{"version":3,"sources":["/Users/ChrisJohnCarter/Development/Bank-Hero/front-end/src/actions/fetchAccounts.js"],"names":["accountTemplate","state","name","cash","transactionTemplate","account_from","account_to","fetchAccounts","dispatch","type","fetch","then","response","json","responseJSON","accounts","fetchTransactions","transactions","fetchCats","cats","images","createAccount","header","method","headers","body","JSON","stringify","console","log","createTransaction"],"mappings":"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","sourcesContent":["\n const accountTemplate = (state) => ({\n  name: state.name,\n  cash: state.cash\n\n});\n\nconst transactionTemplate = (state) => ({\n  account_from: state.account_from,\n  account_to: state.account_to,\n  cash: state.cash\n});\n\n//an action is a pojo with info that describes state change\n// example: {type: \"LOADING_ACCOUNTS\", payload: {}} (payload is optional)\n\n//thunk puts fetch() logic into action creators\n//Thunk middleware allows action creators to return functions that don't need to be pure\n//this allows async api calls\n\n/*\n\n//thunk enables proper async requests to be used with redux\n\n\n//without thunk:\nexport function fetchAstronauts() {\n  const astronauts = fetch('http://api.open-notify.org/astros.json')\n                      .then(response => response.json())\n  return {\n    type: 'ADD_ASTRONAUTS',\n    astronauts\n  };\n}\n\n\n\n*/\n\n  export const fetchAccounts = () => {\n\n    return (dispatch) => {\n      dispatch({ type: 'LOADING_ACCOUNTS'})\n      fetch('http://localhost:4000/accounts').then(response => {\n        return response.json()\n      }).then(responseJSON => {\n\n        dispatch({ type: 'ADD_ACCOUNTS', accounts: responseJSON })\n      })\n    }\n  }\n\n  export const fetchTransactions = () => {\n\n\n    return (dispatch) => {\n      dispatch({ type: 'LOADING_TRANSACTIONS'})\n      fetch('http://localhost:4000/transactions').then(response => {\n        return response.json()\n      }).then(responseJSON => {\n\n        dispatch({ type: 'ADD_TRANSACTIONS', transactions: responseJSON })\n      })\n    }\n  }\n\n\n  export const fetchCats = () => {\n    return (dispatch) => {\n      dispatch({ type: 'LOADING_CATS'})\n      fetch('https://learn-co-curriculum.github.io/cat-api/cats.json').then(response => {\n        return response.json()\n      }).then(responseJSON => {\n\n        dispatch({ type: 'ADD_CATS', cats: responseJSON.images })\n      })\n    }\n  }\n\n  export const createAccount = (state) => {\n\n\n    let header = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(accountTemplate(state)),\n    };\n\n    return (dispatch) => {\n      dispatch({ type: 'CREATE_ACCOUNT'})\n\n      fetch('http://localhost:4000/accounts', header).then(response => {\n        return response.json()\n      }).then(responseJSON => {\n        console.log(responseJSON)\n       // dispatch({ type: 'ADD_ACCOUNTS', accounts: responseJSON })\n      })\n\n      \n\n    }\n\n  }\n\n  export const createTransaction = (state) => {\n\n    let header = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(transactionTemplate(state)),\n    };\n\n    return (dispatch) => {\n      dispatch({ type: 'CREATE_TRANSACTION'})\n      fetch('http://localhost:4000/transactions/', header).then(response => {\n        return response.json()\n      }).then(responseJSON => {\n        console.log(responseJSON)\n       // dispatch({ type: 'ADD_ACCOUNTS', accounts: responseJSON })\n      })\n    }\n  }\n\n\n"]},"metadata":{},"sourceType":"module"}