{"ast":null,"code":"/*\nexport const fetchAccounts = () => {\n    return (dispatch) => {\n      dispatch({ type: 'LOADING_ACCOUNTS'})\n      fetch('https://localhost:4000/accounts').then(response => {\n        return response.json()\n      }).then(responseJSON => {\n        dispatch({ type: 'ADD_ACCOUNTS', accounts: responseJSON.json })\n      })\n    }\n  }\n  */\nconst accountTemplate = state => ({\n  name: state.name\n});\n\nexport const fetchAccounts = () => {\n  console.log(\"HI\");\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_ACCOUNTS'\n    });\n    fetch('http://localhost:4000/accounts').then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      console.log(responseJSON);\n      dispatch({\n        type: 'ADD_ACCOUNTS',\n        accounts: responseJSON\n      });\n    });\n  };\n};\nexport const createCounter = () => {\n  let name = \"New Name Here\"; // Simple POST request with a JSON body using fetch\n\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      counter: {\n        name: name\n      }\n    })\n  };\n  fetch('http://localhost:4000/counters', requestOptions).then(response => response.json()).then(data => console.log(data));\n};\nexport const createUser = state => {\n  let configurationObject = {\n    method: \"Post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify(_userObject(state))\n  };\n  return async dispatch => {\n    const res = await fetch(BASEURL + \"sign_up\", configurationObject);\n    const json = await res.json();\n\n    if (json.error) {\n      throw new Error(json.error + \" \" + json.message);\n    }\n\n    localStorage.setItem(\"token\", json.jwt);\n    dispatch({\n      type: \"CREATE_USER\",\n      payload: json.user\n    });\n  };\n};\nexport const createAccount = () => {\n  console.log(\"HI\");\n  let state = {\n    name: \"chris\"\n  };\n  let header = {\n    method: \"Post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify(accountTemplate(state))\n  };\n  return dispatch => {\n    dispatch({\n      type: 'CREATE_ACCOUNT'\n    });\n    fetch('http://localhost:4000/accounts', header).then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      console.log(responseJSON);\n      dispatch({\n        type: 'ADD_ACCOUNTS',\n        accounts: responseJSON\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/ChrisJohnCarter/Development/Bank-Hero/front-end/src/actions/fetchAccounts.js"],"names":["accountTemplate","state","name","fetchAccounts","console","log","dispatch","type","fetch","then","response","json","responseJSON","accounts","createCounter","requestOptions","method","headers","body","JSON","stringify","counter","data","createUser","configurationObject","Accept","_userObject","res","BASEURL","error","Error","message","localStorage","setItem","jwt","payload","user","createAccount","header"],"mappings":"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","sourcesContent":["\n/*\nexport const fetchAccounts = () => {\n    return (dispatch) => {\n      dispatch({ type: 'LOADING_ACCOUNTS'})\n      fetch('https://localhost:4000/accounts').then(response => {\n        return response.json()\n      }).then(responseJSON => {\n        dispatch({ type: 'ADD_ACCOUNTS', accounts: responseJSON.json })\n      })\n    }\n  }\n  */\n\n const accountTemplate = (state) => ({\n  name: state.name\n\n});\n\n\n  export const fetchAccounts = () => {\n\n    console.log(\"HI\")\n    return (dispatch) => {\n      dispatch({ type: 'LOADING_ACCOUNTS'})\n      fetch('http://localhost:4000/accounts').then(response => {\n        return response.json()\n      }).then(responseJSON => {\n        console.log(responseJSON)\n        dispatch({ type: 'ADD_ACCOUNTS', accounts: responseJSON })\n      })\n    }\n  }\n\n\n  export const createCounter = () => {\n    let name = \"New Name Here\"\n    // Simple POST request with a JSON body using fetch\n    const requestOptions = {\n     method: 'POST',\n     headers: { 'Content-Type': 'application/json' },\n     body: JSON.stringify({counter:{ name: name }})\n   };\n   fetch('http://localhost:4000/counters', requestOptions)\n       .then(response => response.json())\n       .then(data => console.log(data));\n }\n\n\nexport const createUser = (state) => {\n  let configurationObject = {\n    method: \"Post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n    body: JSON.stringify(_userObject(state)),\n  };\n  return async (dispatch) => {\n    const res = await fetch(BASEURL + \"sign_up\", configurationObject);\n    const json = await res.json();\n    if (json.error) {\n      throw new Error(json.error + \" \" + json.message);\n    }\n    localStorage.setItem(\"token\", json.jwt);\n    dispatch({\n      type: \"CREATE_USER\",\n      payload: json.user,\n    });\n  };\n};\n\n  export const createAccount = () => {\n    console.log(\"HI\")\n    let state = {name:\"chris\"}\n\n    let header = {\n      method: \"Post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify(accountTemplate(state)),\n    };\n\n    return (dispatch) => {\n      dispatch({ type: 'CREATE_ACCOUNT'})\n      fetch('http://localhost:4000/accounts', header).then(response => {\n        return response.json()\n      }).then(responseJSON => {\n        console.log(responseJSON)\n        dispatch({ type: 'ADD_ACCOUNTS', accounts: responseJSON })\n      })\n    }\n  }\n\n\n"]},"metadata":{},"sourceType":"module"}