{"ast":null,"code":"/*\nexport const fetchAccounts = () => {\n    return (dispatch) => {\n      dispatch({ type: 'LOADING_ACCOUNTS'})\n      fetch('https://localhost:4000/accounts').then(response => {\n        return response.json()\n      }).then(responseJSON => {\n        dispatch({ type: 'ADD_ACCOUNTS', accounts: responseJSON.json })\n      })\n    }\n  }\n  */\nexport const fetchAccounts = () => {\n  return dispatch => {\n    dispatch({\n      type: 'LOADING_ACCOUNTS'\n    });\n    fetch('http://localhost:4000/accounts').then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      console.log(responseJSON);\n      dispatch({\n        type: 'ADD_ACCOUNTS',\n        accounts: responseJSON\n      });\n    });\n  };\n};\nexport const creatAccount = () => {\n  return dispatch => {\n    dispatch({\n      type: 'CREATE_ACCOUNT'\n    });\n    fetch('http://localhost:4000/accounts').then(response => {\n      return response.json();\n    }).then(responseJSON => {\n      console.log(responseJSON);\n      dispatch({\n        type: 'ADD_ACCOUNTS',\n        accounts: responseJSON\n      });\n    });\n  };\n};\nexport const createUser = state => {\n  let configurationObject = {\n    method: \"Post\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify(_userObject(state))\n  };\n  return async dispatch => {\n    const res = await fetch(BASEURL + \"sign_up\", configurationObject);\n    const json = await res.json();\n\n    if (json.error) {\n      throw new Error(json.error + \" \" + json.message);\n    }\n\n    localStorage.setItem(\"token\", json.jwt);\n    dispatch({\n      type: \"CREATE_USER\",\n      payload: json.user\n    });\n  };\n};","map":{"version":3,"sources":["/Users/ChrisJohnCarter/Development/Bank-Hero/front-end/src/actions/fetchAccounts.js"],"names":["fetchAccounts","dispatch","type","fetch","then","response","json","responseJSON","console","log","accounts","creatAccount","createUser","state","configurationObject","method","headers","Accept","body","JSON","stringify","_userObject","res","BASEURL","error","Error","message","localStorage","setItem","jwt","payload","user"],"mappings":"AACA;;;;;;;;;;;;AAcE,OAAO,MAAMA,aAAa,GAAG,MAAM;AACjC,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAC,gCAAD,CAAL,CAAwCC,IAAxC,CAA6CC,QAAQ,IAAI;AACvD,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAFD,EAEGF,IAFH,CAEQG,YAAY,IAAI;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACAN,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,cAAR;AAAwBQ,QAAAA,QAAQ,EAAEH;AAAlC,OAAD,CAAR;AACD,KALD;AAMD,GARD;AASD,CAVM;AAYP,OAAO,MAAMI,YAAY,GAAG,MAAM;AAChC,SAAQV,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAC,IAAAA,KAAK,CAAC,gCAAD,CAAL,CAAwCC,IAAxC,CAA6CC,QAAQ,IAAI;AACvD,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAFD,EAEGF,IAFH,CAEQG,YAAY,IAAI;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACAN,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,cAAR;AAAwBQ,QAAAA,QAAQ,EAAEH;AAAlC,OAAD,CAAR;AACD,KALD;AAMD,GARD;AASD,CAVM;AAYP,OAAO,MAAMK,UAAU,GAAIC,KAAD,IAAW;AACnC,MAAIC,mBAAmB,GAAG;AACxBC,IAAAA,MAAM,EAAE,MADgB;AAExBC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPC,MAAAA,MAAM,EAAE;AAFD,KAFe;AAMxBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,WAAW,CAACR,KAAD,CAA1B;AANkB,GAA1B;AAQA,SAAO,MAAOZ,QAAP,IAAoB;AACzB,UAAMqB,GAAG,GAAG,MAAMnB,KAAK,CAACoB,OAAO,GAAG,SAAX,EAAsBT,mBAAtB,CAAvB;AACA,UAAMR,IAAI,GAAG,MAAMgB,GAAG,CAAChB,IAAJ,EAAnB;;AACA,QAAIA,IAAI,CAACkB,KAAT,EAAgB;AACd,YAAM,IAAIC,KAAJ,CAAUnB,IAAI,CAACkB,KAAL,GAAa,GAAb,GAAmBlB,IAAI,CAACoB,OAAlC,CAAN;AACD;;AACDC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BtB,IAAI,CAACuB,GAAnC;AACA5B,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE,aADC;AAEP4B,MAAAA,OAAO,EAAExB,IAAI,CAACyB;AAFP,KAAD,CAAR;AAID,GAXD;AAYD,CArBM","sourcesContent":["\n/*\nexport const fetchAccounts = () => {\n    return (dispatch) => {\n      dispatch({ type: 'LOADING_ACCOUNTS'})\n      fetch('https://localhost:4000/accounts').then(response => {\n        return response.json()\n      }).then(responseJSON => {\n        dispatch({ type: 'ADD_ACCOUNTS', accounts: responseJSON.json })\n      })\n    }\n  }\n  */\n\n\n  export const fetchAccounts = () => {\n    return (dispatch) => {\n      dispatch({ type: 'LOADING_ACCOUNTS'})\n      fetch('http://localhost:4000/accounts').then(response => {\n        return response.json()\n      }).then(responseJSON => {\n        console.log(responseJSON)\n        dispatch({ type: 'ADD_ACCOUNTS', accounts: responseJSON })\n      })\n    }\n  }\n\n  export const creatAccount = () => {\n    return (dispatch) => {\n      dispatch({ type: 'CREATE_ACCOUNT'})\n      fetch('http://localhost:4000/accounts').then(response => {\n        return response.json()\n      }).then(responseJSON => {\n        console.log(responseJSON)\n        dispatch({ type: 'ADD_ACCOUNTS', accounts: responseJSON })\n      })\n    }\n  }\n\n  export const createUser = (state) => {\n    let configurationObject = {\n      method: \"Post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify(_userObject(state)),\n    };\n    return async (dispatch) => {\n      const res = await fetch(BASEURL + \"sign_up\", configurationObject);\n      const json = await res.json();\n      if (json.error) {\n        throw new Error(json.error + \" \" + json.message);\n      }\n      localStorage.setItem(\"token\", json.jwt);\n      dispatch({\n        type: \"CREATE_USER\",\n        payload: json.user,\n      });\n    };\n  };"]},"metadata":{},"sourceType":"module"}